var _ = require('lodash');

var Sequelize = require('sequelize');
var sequelize = require('./sequelize');

var lists = require('../conf').lists;

//
// User
//

(function () {
  var sha = require('./lib/sha');
  function shaPass(user) {
    if (user.changed('password') && user.password) {
      user.password = sha(user.password);
    }
  }

  function beforeCreateUpdate(user) {
    // sha password
    shaPass(user);
  }

  var User = sequelize.define('User', {
    id: {
      type: Sequelize.UUID,
      defaultValue: Sequelize.literal('uuid_generate_v4()'), // http://krmannix.com/2017/05/23/postgres-autogenerated-uuids-with-sequelize/
      primaryKey: true
    },
    email: Sequelize.STRING,
    email_confirmed: Sequelize.BOOLEAN,
    password: Sequelize.STRING,
    
    firstname: Sequelize.STRING,
    lastname: Sequelize.STRING,
    birthday: Sequelize.DATE,
    street: Sequelize.STRING,
    zip: Sequelize.STRING,
    city: Sequelize.STRING,
    
    acceptcgu: Sequelize.BOOLEAN,
    acceptoffers: Sequelize.BOOLEAN,
    facebookid: Sequelize.STRING,
    googleid: Sequelize.STRING,

    points: {
      type: Sequelize.INTEGER,
      defaultValue: 0
    }
  }, {
    //as: 'Users', // plural
    underscored: true,
    tableName: 'users',
    paranoid: true,
    hooks: {
      beforeCreate: beforeCreateUpdate,
      beforeUpdate: beforeCreateUpdate
    }
  });

  User.prototype.validPassword = function (password) {
    return (sha(password) === this.password);
  };
  User.prototype.incrementpoints = function (amount) {
    this.points += amount;
  }

  exports.User = User;
}).call(this);